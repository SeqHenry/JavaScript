html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <script src ="closures.js"></script>
    
</body>
</html>


/*************************************************************************************************************/
javascript:

/************************************************************************************************************/

                               //Program for creating closure

/************************************************************************************************************/

//Creating a closure and accessing with private access emulation

var counter =(function(){
    var privateCounter =0;
    function changeBy(val){
        privateCounter +=val;
    }
    return {
        increment:function(){
            changeBy(1);
        },
        decrement:function(){
            changeBy(-1);
        },
        value:function(){
            return privateCounter;
        }
    };
})();

console.log(counter.value());
counter.increment();
counter.increment();
console.log(counter.value());
counter.decrement();
console.log(counter.value());

/*************************************************************************************************************/

                           //A Basic Example of Closures in JavaScript:

/*************************************************************************************************************/

function showName (firstName, lastName) {
    var nameIntro = "Your name is ";
    // this inner function has access to the outer function's variables, including the parameter
    function makeFullName () {        
    return nameIntro + firstName + " " + lastName;    
    }
    return makeFullName ();
}  
console.log(showName ("Michael", "Jackson")); // Your name is Michael Jackson


/****************************************************************************************************************/

///******************************* Closures Rules and Side Effects***********************************************/

/****************************************************************************************************************/

//1.Closures have access to the outer function’s variable even after the outer function returns:

function celebrityName (firstName) {
    var nameIntro = "This celebrity is ";
    // this inner function has access to the outer function's variables, including the parameter
   function lastName (theLastName) {
        return nameIntro + firstName + " " + theLastName;
    }
    return lastName;
}

var mjName = celebrityName ("Michael"); // At this juncture, the celebrityName outer function has returned.

/*The closure (lastName) is called here after the outer function has returned above Yet, the closure still has access 
  to the outer function's variables and parameter*/

console.log(mjName ("Jackson")); // This celebrity is Michael Jackson


//2.Closures store references to the outer function’s variables;

function celebrityID () {
    var celebrityID = 999;
    // We are returning an object with some inner functions
    // All the inner functions have access to the outer function's variables
    return {
        getID: function ()  {
            // This inner function will return the UPDATED celebrityID variable
            // It will return the current value of celebrityID, even after the changeTheID function changes it
          return celebrityID;
        },
        setID: function (theNewID)  {
            // This inner function will change the outer function's variable anytime
            celebrityID = theNewID;
        }
    }

}

var mjID = celebrityID (); // At this juncture, the celebrityID outer function has returned.
console.log(mjID.getID()); // 999
mjID.setID(567);           // Changes the outer function's variable
console.log(mjID.getID()); // 567: It returns the updated celebrityId variable


//3.Closures Gone Awry

 //This example is explained in detail below (just after this code box).
function celebrityIDCreator (theCelebrities) {
    var i;
    var uniqueID = 100;
    for (i = 0; i < theCelebrities.length; i++) {
      theCelebrities[i]["id"] = function ()  {
        return uniqueID + i;
      }
    }
    
    return theCelebrities;
}

var actionCelebs = [{name:"Stallone", id:0}, {name:"Cruise", id:0}, {name:"Willis", id:0}];

var createIdForActionCelebs = celebrityIDCreator (actionCelebs);

var stalloneID = createIdForActionCelebs [0];
let cruiseID=createIdForActionCelebs [1];

console.log(stalloneID)
console.log(cruiseID.id);//103
console.log(stalloneID.id); // 103


/*In the preceding example, by the time the anonymous functions are called, the value of i is 3 (the length of the array and 
then it increments). The number 3 was added to the uniqueID to create 103 for ALL the celebritiesID. So every position in the 
returned array get id = 103, instead of the intended 100, 101, 102.*/


/*To fix this side effect (bug) in closures, you can use an Immediately
 Invoked Function Expression (IIFE), such as the following:*/
 function celebrityIDCreator (theCelebrities) {
    var i;
    var uniqueID1 = 100;
    for (i = 0; i < theCelebrities.length; i++) {
        theCelebrities[i]["id"] = function (j)  { // the j parametric variable is the i passed in on invocation of this IIFE
            return function () {
                return uniqueID1 + j; // each iteration of the for loop passes the current value of i into this IIFE and it saves the correct value to the array
            } () // BY adding () at the end of this function, we are executing it immediately and returning just the value of uniqueID + j, instead of returning a function.
        } (i); // immediately invoke the function passing the i variable as a parameter
    }

    return theCelebrities;
}

var actionCelebs = [{name:"Stallone", id:0}, {name:"Cruise", id:0}, {name:"Willis", id:0}];

var createIdForActionCelebs = celebrityIDCreator (actionCelebs);

var stalloneID1 = createIdForActionCelebs [0];
 console.log(stalloneID1.id); // 100

var cruiseID1 = createIdForActionCelebs [1];
console.log(cruiseID1.id); // 101

function init() {
    var name = "Mozilla"; // name is a local variable created by init
    function displayName() { // displayName() is the inner function, a closure
        //alert (name); // displayName() uses variable declared in the parent function    
        console.log(name)
    }
    displayName();    
}
init();
/////

function makeAdder(x) {
    return function(y) {
      return x + y;
    };
  }
  
  var add5 = makeAdder(5);
  var add10 = makeAdder(10);
  
  //console.log(add5(2));  // 7
  //console.log(add10(2)); // 12
   console.log(add5(0));  // 7
   console.log(add10(-0));
  
